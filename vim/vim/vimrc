" VIM-PLUG BLOCK {{{
call plug#begin('~/.vim/plugged')
" Autocomplete
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'zchee/deoplete-clang'

" Required by deoplete on Vim
if !has('nvim')
	Plug 'roxma/vim-hug-neovim-rpc'
	Plug 'roxma/nvim-yarp'
endif

" Compile
Plug 'neomake/neomake'

" Editing/Moving
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'

" GIT
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Fuzzy search
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Window and buffer management
Plug 'moll/vim-bbye'
Plug 'troydm/zoomwintab.vim'

" UI
Plug 'iCyMind/NeoSolarized'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Misc
Plug 'tpope/vim-eunuch'
call plug#end()
" }}}

" BASIC SETTINGS {{{

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Enable syntax highlighting.
syntax on

" Automatically indent when adding a curly bracket, etc.
set smartindent

" Use UTF-8.
set encoding=utf-8

" Show offset of line relative to current
set relativenumber number

" Disable use of mouse all modes
set mouse=

" Show line number, cursor position
set ruler

" Display incomplete commands.
set showcmd

" Search as you type.
set incsearch

" Show editing mode
set showmode

" How many lines of history to remember
set history=10000

" Use system clipboard as default paste/delete/yank register
set clipboard=unnamed

" If there are caps, go case-sensitive
set ignorecase
set smartcase

" Turn on wildmenu
set wildmenu

" Shell-like completions
set wildmode=longest,full

" Do not redraw while running macros (much faster)
set lazyredraw

" You can change buffer without saving
set hidden

" Show matching brackets
set showmatch

" Do not save backups
set nobackup

" Keep 5 lines (top/bottom) for scope
set scrolloff=5

" Keep 5 lines at the size
set sidescrolloff=5

" Always show the status line
set laststatus=2

" Do not wrap strings
set nowrap

" Set fold method
set foldmethod=marker

" Persistent undo
set undofile
set undodir=~/.vimundo

" Highlight search
set hlsearch

" Symbols to indicate tabstops and EOLs when 'list' is set
set listchars=tab:▸\ ,trail:-,extends:>,precedes:<,nbsp:+,eol:¬

" Split vertical windows right to the current windows
set splitright

" Split horizontal windows below to the current windows
set splitbelow

" Automatically save before :next, :make etc.
set autowrite

" More colors in capable terminals
set termguicolors

" Change colorscheme
set background=dark
colorscheme NeoSolarized
highlight ExtraWhitespace ctermbg=red guibg=red

" Delete comment character when joining commented lines
set formatoptions+=j

" Preview of result of some commands in split window
" FIXME: doesn't work with :terminal
" set inccommand=split

" Use both cscope and ctag for ‘ctrl-]’, ‘:tag’, and ‘vim -t’
set cscopetag

" Add cscope connection if database found
if filereadable("cscope.out")
	cscope add cscope.out
endif

" Enable filetype plugins
filetype plugin indent on

" Set <Leader>
let mapleader=","

" .h files are C, not C++
let g:c_syntax_for_h=1

" Make netrw less annoying
let g:netrw_silent=1

" }}}

" AUTOCMD {{{
"
" http://vim.wikia.com/wiki/Highlight_unwanted_spaces
autocmd BufNewFile,BufRead,InsertLeave * silent! match ExtraWhitespace /\s\+$/
autocmd InsertEnter * silent! match ExtraWhitespace /\s\+\%#\@<!$/

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
autocmd BufReadPost *
	\  if line("'\"") > 1 && line("'\"") <= line("$")
	\|   exe 'normal! g`"zvzz'
	\| endif

" Per-project settings
autocmd BufRead,BufNewFile *linux*/*.[ch] source ~/.vim/ftplugin/c-linux.vim
autocmd BufRead,BufNewFile *qemu*/*.[ch] source ~/.vim/ftplugin/c-qemu.vim
autocmd BufRead,BufNewFile *notmuch*/*.{c,cc,h} source ~/.vim/ftplugin/c-notmuch.vim

if has('nvim')
	" Terminal scrollback size
	autocmd TermOpen * setlocal scrollback=100000

	" Jump into/out terminal
	autocmd BufEnter * if &buftype == 'terminal' | :startinsert | endif
	autocmd BufLeave * if &buftype == 'terminal' | :stopinsert | endif
endif

" }}}

" {{{ MAPPING

" Remove search highlight and re-evaluate syntax highlighting
nnoremap <c-l> :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

" Navigate windows
nnoremap <A-j> <C-w>w
nnoremap <A-k> <C-w>W
nnoremap <Leader><Left> gT
nnoremap <Leader><Right> gt
nnoremap <A-m> :ZoomWinTabToggle<CR>
nnoremap <A-CR> :vsplit +term<CR>
nnoremap <A-Backspace> :Bdelete<CR>
nnoremap <A-c> :close<CR>

if has('nvim')
	tnoremap <Leader><Esc> <C-\><C-n>
	tnoremap <A-j> <C-\><C-n>^<C-w>w
	tnoremap <A-k> <C-\><C-n>^<C-w>W
	tnoremap <A-m> <C-\><C-n>:ZoomWinTabToggle<CR>i
	tnoremap <A-CR> <C-\><C-n>:vsplit +term<CR>
	tnoremap <A-Backspace> <C-\><C-n>:Bdelete!<CR>
	tnoremap <A-c> <C-\><C-n>:close<CR>
	tnoremap <Leader><Left> <C-\><C-n>gT
	tnoremap <Leader><Right> <C-\><C-n>gt
endif

cnoreabbrev <silent> wq w<bar>Bdelete
cnoreabbrev <silent> q Bdelete

inoremap <silent><expr><Tab>	pumvisible() ? "\<Down>" : "\<Tab>"
" deoplete#mappings#manual_complete()
inoremap <silent><expr><S-Tab>	pumvisible() ? "\<Up>" : "\<S-Tab>"
inoremap <silent><expr><Esc>	pumvisible() ? "\<C-e>" : "\<Esc>"
inoremap <silent><expr><CR>	pumvisible() ? "\<C-y>" : "\<CR>"

" }}}

" PLUGINS {{{

"----------------------------------------------------------------------
" vim-plug
let g:plug_shallow = 0

"----------------------------------------------------------------------
" deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#disable_auto_complete = 0
let g:deoplete#auto_complete_delay = 500
let g:deoplete#tag#cache_limit_size = 5000000

" Toggle deoplete.
fun! _My_toggle_deoplete()
	let g:deoplete#disable_auto_complete = !g:deoplete#disable_auto_complete
endfun
noremap  <F12> :<C-u>call _My_toggle_deoplete()<CR>
inoremap <F12> <c-o>:call _My_toggle_deoplete()<CR>

"----------------------------------------------------------------------
" deoplete-clang
let g:deoplete#sources#clang#libclang_path = "/usr/lib/llvm-3.8/lib/libclang.so"
let g:deoplete#sources#clang#clang_header = "/usr/lib/clang/3.8/include"

call deoplete#custom#source('clang', 'mark', '©')
call deoplete#custom#source('clang', 'rank', 1000)

"----------------------------------------------------------------------
" neomake
call neomake#configure#automake('w')

let g:neomake_error_sign = {'text': '✘', 'texthl': 'NeomakeErrorSign'}
let g:neomake_warning_sign = {
			\   'text': '⚑',
			\   'texthl': 'NeomakeWarningSign',
			\ }
let g:neomake_message_sign = {
			\   'text': '➤',
			\   'texthl': 'NeomakeMessageSign',
			\ }
let g:neomake_info_sign = {'text': 'ℹ', 'texthl': 'NeomakeInfoSign'}

let g:neomake_c_linux_maker = {
        \ 'exe': 'make',
        \ 'args': ['O="/home/kas/var/linus"', '-j100', '%:r.o'],
        \ 'errorformat':
            \ '%f:%l:%c: %trror: %m,' .
            \ '%f:%l:%c: %tarning: %m,' .
            \ '%f:%l: %trror: %m,'.
            \ '%f:%l: %tarning: %m,'
        \ }

let s:spinner_index = 0
let s:active_spinners = 0
let s:spinner_states = ['←', '↖', '↑', '↗', '→', '↘', '↓', '↙']

function! StartSpinner()
    let b:show_spinner = 1
    let s:active_spinners += 1
    if s:active_spinners == 1
        let s:spinner_timer = timer_start(1000 / len(s:spinner_states), 'SpinSpinner', {'repeat': -1})
    endif
endfunction

function! StopSpinner()
    let b:show_spinner = 0
    let s:active_spinners -= 1
    if s:active_spinners == 0
        :call timer_stop(s:spinner_timer)
    endif
endfunction

function! SpinSpinner(timer)
    let s:spinner_index = float2nr(fmod(s:spinner_index + 1, len(s:spinner_states)))
    redraw
endfunction

function! SpinnerText()
    if get(b:, 'show_spinner', 0) == 0
        return " "
    endif

    return s:spinner_states[s:spinner_index]
endfunction

augroup neomake_hooks
    au!
    autocmd User NeomakeJobInit :call StartSpinner()
    autocmd User NeomakeFinished :call StopSpinner()
augroup END

"----------------------------------------------------------------------
" EasyMotion
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_enter_jump_first = 1

" Use `s{char}{char}{label}` to move around the screen
nmap s <Plug>(easymotion-overwin-f2)

" gitgutter
let g:gitgutter_override_sign_column_highlight = 0

"----------------------------------------------------------------------
" FZF
nnoremap <silent><Leader><Leader>	:Files<CR>
nnoremap <silent><Leader><Enter>	:Buffers<CR>
nnoremap <silent><Leader>c		:Commits<CR>
nnoremap <silent><Leader>l		:Lines<CR>
nnoremap <silent><Leader>ag		:Ag <C-R><C-W><CR>
nnoremap <silent><Leader>AG		:Ag <C-R><C-A><CR>
xnoremap <silent><Leader>ag		:Ag <C-R>"<CR>
nnoremap <silent><Leader>gg		:GFiles<CR>
nnoremap <silent><Leader>gG		:GGrep<CR>

" Command for git grep
" - fzf#vim#grep(command, with_column, [options], [fullscreen])
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep('git grep --line-number '.shellescape(<q-args>), 0, <bang>0)

"----------------------------------------------------------------------
" airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#checks = [ 'trailing' ]
let g:airline#extensions#neomake#error_symbol = '✘'
let g:airline#extensions#neomake#warning_symbol = '⚑'

call airline#parts#define('spinner', {'function': 'SpinnerText', 'accents': 'bold'})
let g:airline_section_z = airline#section#create(['spinner'])
" }}}
