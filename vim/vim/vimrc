" VIM-PLUG BLOCK {{{
call plug#begin('~/.vim/plugged')

" Rule them all
Plug 'Shougo/denite.nvim'

" Autocomplete
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'deoplete-plugins/deoplete-clang'

" Compile
Plug 'neomake/neomake'

" Editing/Moving
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'

" Window and buffer management
Plug 'troydm/zoomwintab.vim'

" UI
Plug 'arcticicestudio/nord-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Misc
Plug 'tpope/vim-eunuch'
call plug#end()
" }}}

" BASIC SETTINGS {{{

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Enable syntax highlighting.
syntax on

" Automatically indent when adding a curly bracket, etc.
set smartindent

" Use UTF-8.
set encoding=utf-8

" Show offset of line relative to current
set relativenumber number

" Disable use of mouse all modes
set mouse=

" Show line number, cursor position
set ruler

" Display incomplete commands.
set showcmd

" Search as you type.
set incsearch

" Show editing mode
set showmode

" How many lines of history to remember
set history=10000

" Use system clipboard as default paste/delete/yank register
set clipboard=unnamed

" If there are caps, go case-sensitive
set ignorecase
set smartcase

" Turn on wildmenu
set wildmenu

" Shell-like completions
set wildmode=longest,full

" Do not redraw while running macros (much faster)
set lazyredraw

" You can change buffer without saving
set hidden

" Show matching brackets
set showmatch

" Do not save backups
set nobackup

" Keep 5 lines (top/bottom) for scope
set scrolloff=5

" Keep 5 lines at the size
set sidescrolloff=5

" Always show the status line
set laststatus=2

" Do not wrap strings
set nowrap

" Set fold method
set foldmethod=marker

" Persistent undo
set undofile
set undodir=~/.vimundo

" Highlight search
set hlsearch

" Symbols to indicate tabstops and EOLs when 'list' is set
set listchars=tab:▸\ ,trail:-,extends:>,precedes:<,nbsp:+,eol:¬

" Split vertical windows right to the current windows
set splitright

" Split horizontal windows below to the current windows
set splitbelow

" Automatically save before :next, :make etc.
set autowrite

" More colors in capable terminals
set termguicolors

" Change colorscheme
set background=dark
colorscheme nord
"highlight ExtraWhitespace ctermbg=red guibg=red

" Delete comment character when joining commented lines
set formatoptions+=j

" Preview of result of some commands in split window
" FIXME: doesn't work with :terminal
" set inccommand=split

" Use both cscope and ctag for ‘ctrl-]’, ‘:tag’, and ‘vim -t’
set cscopetag

" Add cscope connection if database found
if filereadable("cscope.out")
	cscope add cscope.out
endif

" Enable filetype plugins
filetype plugin indent on

" Set <Leader>
let mapleader=","

" .h files are C, not C++
let g:c_syntax_for_h=1

" Make netrw less annoying
let g:netrw_silent=1

" nvr as git editor
let $GIT_EDITOR = 'nvr -cc split --remote-wait'

" }}}

" AUTOCMD {{{
"
" http://vim.wikia.com/wiki/Highlight_unwanted_spaces
autocmd BufNewFile,BufRead,InsertLeave * silent! match ExtraWhitespace /\s\+$/
autocmd InsertEnter * silent! match ExtraWhitespace /\s\+\%#\@<!$/

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
autocmd BufReadPost *
	\  if line("'\"") > 1 && line("'\"") <= line("$")
	\|   exe 'normal! g`"zvzz'
	\| endif

" Per-project settings
autocmd BufRead,BufNewFile *linux*/*.[ch] source ~/.vim/ftplugin/c-linux.vim
autocmd BufRead,BufNewFile *qemu*/*.[ch] source ~/.vim/ftplugin/c-qemu.vim
autocmd BufRead,BufNewFile *notmuch*/*.{c,cc,h} source ~/.vim/ftplugin/c-notmuch.vim

" Terminal scrollback size
autocmd TermOpen * setlocal scrollback=100000

" Jump into/out terminal
autocmd BufEnter * if &buftype == 'terminal' | :startinsert | endif
autocmd BufLeave * if &buftype == 'terminal' | :stopinsert | endif

" }}}

" {{{ MAPPING

" Remove search highlight and re-evaluate syntax highlighting
nnoremap <c-l> :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

" Navigate windows
nnoremap <A-j> <C-w>w
nnoremap <A-k> <C-w>W
nnoremap <Leader><Left> gT
nnoremap <Leader><Right> gt
nnoremap <A-m> :ZoomWinTabToggle<CR>
nnoremap <A-CR> :vsplit +term<CR>
nnoremap <A-c> :close<CR>

" Disable arrow keys completely
noremap <Left> <Nop>
noremap <Right> <Nop>
noremap <Up> <Nop>
noremap <Down> <Nop>
imap <Up> <Nop>
imap <Down> <Nop>
imap <Left> <Nop>
imap <Right> <Nop>

tnoremap <Leader><Esc> <C-\><C-n>
tnoremap <A-j> <C-\><C-n>^<C-w>w
tnoremap <A-k> <C-\><C-n>^<C-w>W
tnoremap <A-m> <C-\><C-n>:ZoomWinTabToggle<CR>i
tnoremap <A-CR> <C-\><C-n>:vsplit +term<CR>
tnoremap <A-c> <C-\><C-n>:close<CR>
tnoremap <Leader><Left> <C-\><C-n>gT
tnoremap <Leader><Right> <C-\><C-n>gt

inoremap <silent><expr><Tab>	pumvisible() ? "\<Down>" : "\<Tab>"
" deoplete#mappings#manual_complete()
inoremap <silent><expr><S-Tab>	pumvisible() ? "\<Up>" : "\<S-Tab>"
inoremap <silent><expr><Esc>	pumvisible() ? "\<C-e>" : "\<Esc>"
inoremap <silent><expr><CR>	pumvisible() ? "\<C-y>" : "\<CR>"

" }}}

" PLUGINS {{{

"----------------------------------------------------------------------
" vim-plug
let g:plug_shallow = 0

"----------------------------------------------------------------------
" deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#disable_auto_complete = 0
let g:deoplete#auto_complete_delay = 500
let g:deoplete#tag#cache_limit_size = 5000000

" Toggle deoplete.
fun! _My_toggle_deoplete()
	let g:deoplete#disable_auto_complete = !g:deoplete#disable_auto_complete
endfun
noremap  <F12> :<C-u>call _My_toggle_deoplete()<CR>
inoremap <F12> <c-o>:call _My_toggle_deoplete()<CR>

"----------------------------------------------------------------------
" deoplete-clang
let g:deoplete#sources#clang#libclang_path = "/usr/lib/llvm/8/lib64/libclang.so"
let g:deoplete#sources#clang#clang_header = "/usr/lib/clang/8.0.1/include"

call deoplete#custom#source('clang', 'mark', '©')
call deoplete#custom#source('clang', 'rank', 1000)

"----------------------------------------------------------------------
" neomake
call neomake#configure#automake('w')

let g:neomake_error_sign = {'text': '✘', 'texthl': 'NeomakeErrorSign'}
let g:neomake_warning_sign = {
			\   'text': '⚑',
			\   'texthl': 'NeomakeWarningSign',
			\ }
let g:neomake_message_sign = {
			\   'text': '➤',
			\   'texthl': 'NeomakeMessageSign',
			\ }
let g:neomake_info_sign = {'text': 'ℹ', 'texthl': 'NeomakeInfoSign'}

let g:neomake_c_linux_maker = {
        \ 'exe': 'make',
        \ 'args': ['O="/home/kas/var/linux"', '-j100', '%:r.s'],
        \ 'errorformat':
            \ '%f:%l:%c: %trror: %m,' .
            \ '%f:%l:%c: %tarning: %m,' .
            \ '%f:%l: %trror: %m,'.
            \ '%f:%l: %tarning: %m,'
        \ }

let s:spinner_index = 0
let s:active_spinners = 0
let s:spinner_states = ['←', '↖', '↑', '↗', '→', '↘', '↓', '↙']

function! StartSpinner()
    let b:show_spinner = 1
    let s:active_spinners += 1
    if s:active_spinners == 1
        let s:spinner_timer = timer_start(1000 / len(s:spinner_states), 'SpinSpinner', {'repeat': -1})
    endif
endfunction

function! StopSpinner()
    let b:show_spinner = 0
    let s:active_spinners -= 1
    if s:active_spinners == 0
        :call timer_stop(s:spinner_timer)
    endif
endfunction

function! SpinSpinner(timer)
    let s:spinner_index = float2nr(fmod(s:spinner_index + 1, len(s:spinner_states)))
    redraw
endfunction

function! SpinnerText()
    if get(b:, 'show_spinner', 0) == 0
        return " "
    endif

    return s:spinner_states[s:spinner_index]
endfunction

augroup neomake_hooks
    au!
    autocmd User NeomakeJobInit :call StartSpinner()
    autocmd User NeomakeFinished :call StopSpinner()
augroup END

"----------------------------------------------------------------------
" EasyMotion
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_enter_jump_first = 1

" Use `s{char}{char}{label}` to move around the screen
nmap s <Plug>(easymotion-overwin-f2)

" gitgutter
let g:gitgutter_override_sign_column_highlight = 0

"----------------------------------------------------------------------
" Denite
"

call denite#custom#option('_', {
			\ 'highlight_matched_char': 'Underlined',
			\ 'highlight_mode_normal': 'CursorLine',
			\ 'max_dynamic_update_candidates': 200000,
			\ 'prompt': '❯',
			\ 'start_filter': 1,
			\ 'winheight': 10,
			\})

autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
	nnoremap <silent><buffer><expr> <CR>	denite#do_map('do_action')
	nnoremap <silent><buffer><expr> d	denite#do_map('do_action', 'delete')
	nnoremap <silent><buffer><expr> p	denite#do_map('do_action', 'preview')
	nnoremap <silent><buffer><expr> <C-v>	denite#do_map('do_action', 'vsplit')
	nnoremap <silent><buffer><expr> <Tab>	denite#do_map('choose_action')
	nnoremap <silent><buffer><expr> <ESC>	denite#do_map('quit')
	nnoremap <silent><buffer><expr> <Space>	denite#do_map('toggle_select')
	nnoremap <silent><buffer><expr> i	denite#do_map('open_filter_buffer')
endfunction

autocmd FileType denite-filter call s:denite_filter_settings()
function s:denite_filter_settings() abort
	call deoplete#custom#buffer_option('auto_complete', v:false)

	inoremap <silent><buffer> <CR>		<ESC><C-w>p:call denite#call_map('do_action')<CR>
	inoremap <silent><buffer> <Esc>		<Esc><C-w>p<CR>
	inoremap <silent><buffer> <Tab>		<Esc><C-w>p:call denite#call_map('choose_action')<CR>

	inoremap <silent><buffer> <C-j>		<Esc><C-w>p:call cursor(line('.')+1,0)<CR><C-w>pA
	inoremap <silent><buffer> <C-k>		<Esc><C-w>p:call cursor(line('.')-1,0)<CR><C-w>pA
	inoremap <silent><buffer> <C-v>		<Esc><C-w>p:call denite#call_map('do_action', 'vsplit')<CR>
endfunction

call denite#custom#source('file/rec', 'matchers', [
        \ 'matcher/hide_hidden_files',
        \ 'matcher/fuzzy',
        \ 'matcher/project_files'
    \])

call denite#custom#source('file/rec', 'sorters', [ 'sorter/rank' ])

nnoremap <silent><Leader><Leader>	:Denite buffer file/rec<CR>
nnoremap <silent><Leader><Enter>	:Denite buffer<CR>
nnoremap <silent><Leader>p		:Denite file/point<CR>
nnoremap <silent><Leader>l		:Denite line<CR>
nnoremap <silent><Leader>t		:Denite tag<CR>
nnoremap <silent><leader>/		:Denite grep:.<CR>
nnoremap <silent><leader>*		:DeniteCursorWord grep:. -mode=normal<CR>

"----------------------------------------------------------------------
" airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#checks = [ 'trailing' ]
let g:airline#extensions#neomake#error_symbol = '✘'
let g:airline#extensions#neomake#warning_symbol = '⚑'

call airline#parts#define('spinner', {'function': 'SpinnerText', 'accents': 'bold'})
let g:airline_section_z = airline#section#create(['spinner'])
" }}}
